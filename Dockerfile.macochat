## MacoChat 专属 Dockerfile 配置
## 基于 LobeChat 的 Dockerfile 定制

## 设置全局构建环境变量
ARG NODEJS_VERSION="22"

## 所有构建阶段的基础镜像
FROM node:${NODEJS_VERSION}-slim AS base

ARG USE_CN_MIRROR

ENV DEBIAN_FRONTEND="noninteractive"

RUN \
    # 如果在中国构建 docker，使用 --build-arg USE_CN_MIRROR=true
    if [ "${USE_CN_MIRROR:-false}" = "true" ]; then \
        sed -i "s/deb.debian.org/mirrors.ustc.edu.cn/g" "/etc/apt/sources.list.d/debian.sources"; \
    fi \
    # 添加必要的包
    && apt update \
    && apt install ca-certificates proxychains-ng -qy \
    # 为 distroless 准备必要的包
    && mkdir -p /distroless/bin /distroless/etc /distroless/etc/ssl/certs /distroless/lib \
    # 复制 proxychains 到 distroless
    && cp /usr/lib/$(arch)-linux-gnu/libproxychains.so.4 /distroless/lib/libproxychains.so.4 \
    && cp /usr/lib/$(arch)-linux-gnu/libdl.so.2 /distroless/lib/libdl.so.2 \
    && cp /usr/bin/proxychains4 /distroless/bin/proxychains \
    && cp /etc/proxychains4.conf /distroless/etc/proxychains4.conf \
    # 复制 node 到 distroless
    && cp /usr/lib/$(arch)-linux-gnu/libstdc++.so.6 /distroless/lib/libstdc++.so.6 \
    && cp /usr/lib/$(arch)-linux-gnu/libgcc_s.so.1 /distroless/lib/libgcc_s.so.1 \
    && cp /usr/local/bin/node /distroless/bin/node \
    # 复制 CA 证书到 distroless
    && cp /etc/ssl/certs/ca-certificates.crt /distroless/etc/ssl/certs/ca-certificates.crt \
    # 清理临时文件
    && rm -rf /tmp/* /var/lib/apt/lists/* /var/tmp/*

## 构建镜像，安装所有依赖并构建应用
FROM base AS builder

ARG USE_CN_MIRROR
ARG NEXT_PUBLIC_BASE_PATH
ARG NEXT_PUBLIC_SENTRY_DSN
ARG NEXT_PUBLIC_ANALYTICS_POSTHOG
ARG NEXT_PUBLIC_POSTHOG_HOST
ARG NEXT_PUBLIC_POSTHOG_KEY
ARG NEXT_PUBLIC_ANALYTICS_UMAMI
ARG NEXT_PUBLIC_UMAMI_SCRIPT_URL
ARG NEXT_PUBLIC_UMAMI_WEBSITE_ID

ENV NEXT_PUBLIC_BASE_PATH="${NEXT_PUBLIC_BASE_PATH}"

# Sentry
ENV NEXT_PUBLIC_SENTRY_DSN="${NEXT_PUBLIC_SENTRY_DSN}" \
    SENTRY_ORG="" \
    SENTRY_PROJECT=""

# Posthog
ENV NEXT_PUBLIC_ANALYTICS_POSTHOG="${NEXT_PUBLIC_ANALYTICS_POSTHOG}" \
    NEXT_PUBLIC_POSTHOG_HOST="${NEXT_PUBLIC_POSTHOG_HOST}" \
    NEXT_PUBLIC_POSTHOG_KEY="${NEXT_PUBLIC_POSTHOG_KEY}"

# Umami
ENV NEXT_PUBLIC_ANALYTICS_UMAMI="${NEXT_PUBLIC_ANALYTICS_UMAMI}" \
    NEXT_PUBLIC_UMAMI_SCRIPT_URL="${NEXT_PUBLIC_UMAMI_SCRIPT_URL}" \
    NEXT_PUBLIC_UMAMI_WEBSITE_ID="${NEXT_PUBLIC_UMAMI_WEBSITE_ID}"

# Node
ENV NODE_OPTIONS="--max-old-space-size=8192"

WORKDIR /app

COPY package.json pnpm-workspace.yaml ./
COPY .npmrc ./
COPY packages ./packages

RUN \
    # 如果在中国构建 docker，使用 --build-arg USE_CN_MIRROR=true
    if [ "${USE_CN_MIRROR:-false}" = "true" ]; then \
        export SENTRYCLI_CDNURL="https://npmmirror.com/mirrors/sentry-cli"; \
        npm config set registry "https://registry.npmmirror.com/"; \
        echo 'canvas_binary_host_mirror=https://npmmirror.com/mirrors/canvas' >> .npmrc; \
    fi \
    # 为 corepack 设置注册表
    && export COREPACK_NPM_REGISTRY=$(npm config get registry | sed 's/\/$//') \
    # 更新 corepack 到最新版本 (nodejs/corepack#612)
    && npm i -g corepack@latest \
    # 启用 corepack
    && corepack enable \
    # 为 corepack 使用 pnpm
    && corepack use $(sed -n 's/.*"packageManager": "\(.*\)".*/\1/p' package.json) \
    # 安装依赖
    && pnpm i

COPY . .

# 为 docker 版本运行构建
RUN npm run build:docker

## 应用镜像，复制所有生产文件
FROM busybox:latest AS app

COPY --from=base /distroless/ /

# 自动利用输出跟踪减少镜像大小
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder /app/.next/standalone /app/

# 复制服务器启动器
COPY --from=builder /app/scripts/serverLauncher/startServer.js /app/startServer.js

RUN \
    # 添加 nextjs:nodejs 用户组来运行应用
    addgroup -S -g 1001 nodejs \
    && adduser -D -G nodejs -H -S -h /app -u 1001 nextjs \
    # 为 nextjs:nodejs 设置权限
    && chown -R nextjs:nodejs /app /etc/proxychains4.conf

## 生产镜像，复制所有文件并运行 next
FROM scratch

# 从 app 复制所有文件，为预渲染缓存设置正确的权限
COPY --from=app / /

ENV NODE_ENV="production" \
    NODE_OPTIONS="--dns-result-order=ipv4first --use-openssl-ca" \
    NODE_EXTRA_CA_CERTS="" \
    NODE_TLS_REJECT_UNAUTHORIZED="" \
    SSL_CERT_DIR="/etc/ssl/certs/ca-certificates.crt"

# 使中间件通过本地重写作为默认设置
# 参考: https://github.com/lobehub/lobe-chat/issues/5876
ENV MIDDLEWARE_REWRITE_THROUGH_LOCAL="1"

# 设置主机名为 localhost
ENV HOSTNAME="0.0.0.0" \
    PORT="3210"

# 通用变量
ENV ACCESS_CODE="" \
    API_KEY_SELECT_MODE="" \
    DEFAULT_AGENT_CONFIG="model=gemini-2.0-flash;provider=vertexai" \
    SYSTEM_AGENT="translation=vertexai/gemini-2.0-flash,topic=vertexai/gemini-2.0-flash,thread=vertexai/gemini-2.0-flash,agentMeta=vertexai/gemini-2.0-flash,queryRewrite=vertexai/gemini-2.0-flash,historyCompress=vertexai/gemini-2.0-flash" \
    FEATURE_FLAGS="-webrtc_sync,-language_model_settings,-openai_api_key,-openai_proxy_url,-dalle,-check_updates,-speech_to_text,-knowledge_base,-clerk_sign_up,+commercial_hide_github,+commercial_hide_docs" \
    NEXT_PUBLIC_CLIENT_DB="pglite" \
    PROXY_URL=""

# 模型变量
ENV \
    # VertexAI (默认启用)
    ENABLED_VERTEXAI="1" \
    VERTEXAI_MODEL_LIST="" \
    VERTEXAI_CREDENTIALS="" \
    VERTEXAI_LOCATION="us-central1" \
    VERTEXAI_PROJECT="" \
    # Google (默认禁用)
    ENABLED_GOOGLE="0" \
    GOOGLE_API_KEY="" \
    GOOGLE_MODEL_LIST="" \
    GOOGLE_PROXY_URL="" \
    # Ollama (默认禁用)
    ENABLED_OLLAMA="0" \
    OLLAMA_MODEL_LIST="" \
    OLLAMA_PROXY_URL="" \
    # OpenAI (默认禁用)
    ENABLED_OPENAI="0" \
    OPENAI_API_KEY="" \
    OPENAI_MODEL_LIST="" \
    OPENAI_PROXY_URL="" \
    # OpenRouter (默认禁用)
    ENABLED_OPENROUTER="0" \
    OPENROUTER_API_KEY="" \
    OPENROUTER_MODEL_LIST="" \
    # 其他模型提供商
    AI21_API_KEY="" AI21_MODEL_LIST="" \
    AI360_API_KEY="" AI360_MODEL_LIST="" \
    ANTHROPIC_API_KEY="" ANTHROPIC_MODEL_LIST="" ANTHROPIC_PROXY_URL="" \
    AWS_ACCESS_KEY_ID="" AWS_SECRET_ACCESS_KEY="" AWS_REGION="" AWS_BEDROCK_MODEL_LIST="" \
    AZURE_API_KEY="" AZURE_API_VERSION="" AZURE_ENDPOINT="" AZURE_MODEL_LIST="" \
    BAICHUAN_API_KEY="" BAICHUAN_MODEL_LIST="" \
    CLOUDFLARE_API_KEY="" CLOUDFLARE_BASE_URL_OR_ACCOUNT_ID="" CLOUDFLARE_MODEL_LIST="" \
    DEEPSEEK_API_KEY="" DEEPSEEK_MODEL_LIST="" \
    FIREWORKSAI_API_KEY="" FIREWORKSAI_MODEL_LIST="" \
    GITEE_AI_API_KEY="" GITEE_AI_MODEL_LIST="" \
    GITHUB_TOKEN="" GITHUB_MODEL_LIST="" \
    GROQ_API_KEY="" GROQ_MODEL_LIST="" GROQ_PROXY_URL="" \
    HIGRESS_API_KEY="" HIGRESS_MODEL_LIST="" HIGRESS_PROXY_URL="" \
    HUGGINGFACE_API_KEY="" HUGGINGFACE_MODEL_LIST="" HUGGINGFACE_PROXY_URL="" \
    HUNYUAN_API_KEY="" HUNYUAN_MODEL_LIST="" \
    INTERNLM_API_KEY="" INTERNLM_MODEL_LIST="" \
    JINA_API_KEY="" JINA_MODEL_LIST="" JINA_PROXY_URL="" \
    MINIMAX_API_KEY="" MINIMAX_MODEL_LIST="" \
    MISTRAL_API_KEY="" MISTRAL_MODEL_LIST="" \
    MOONSHOT_API_KEY="" MOONSHOT_MODEL_LIST="" MOONSHOT_PROXY_URL="" \
    NOVITA_API_KEY="" NOVITA_MODEL_LIST="" \
    NVIDIA_API_KEY="" NVIDIA_MODEL_LIST="" NVIDIA_PROXY_URL="" \
    PERPLEXITY_API_KEY="" PERPLEXITY_MODEL_LIST="" PERPLEXITY_PROXY_URL="" \
    PPIO_API_KEY="" PPIO_MODEL_LIST="" \
    QWEN_API_KEY="" QWEN_MODEL_LIST="" QWEN_PROXY_URL="" \
    SAMBANOVA_API_KEY="" SAMBANOVA_MODEL_LIST="" \
    SENSENOVA_API_KEY="" SENSENOVA_MODEL_LIST="" \
    SILICONCLOUD_API_KEY="" SILICONCLOUD_MODEL_LIST="" SILICONCLOUD_PROXY_URL="" \
    SPARK_API_KEY="" SPARK_MODEL_LIST="" \
    STEPFUN_API_KEY="" STEPFUN_MODEL_LIST="" \
    TAICHU_API_KEY="" TAICHU_MODEL_LIST="" \
    TOGETHERAI_API_KEY="" TOGETHERAI_MODEL_LIST="" \
    UPSTAGE_API_KEY="" UPSTAGE_MODEL_LIST="" \
    VLLM_API_KEY="" VLLM_MODEL_LIST="" VLLM_PROXY_URL="" \
    WENXIN_API_KEY="" WENXIN_MODEL_LIST="" \
    XAI_API_KEY="" XAI_MODEL_LIST="" XAI_PROXY_URL="" \
    ZEROONE_API_KEY="" ZEROONE_MODEL_LIST="" \
    ZHIPU_API_KEY="" ZHIPU_MODEL_LIST="" \
    TENCENT_CLOUD_API_KEY="" TENCENT_CLOUD_MODEL_LIST=""

USER nextjs

EXPOSE 3210/tcp

ENTRYPOINT ["/bin/node"]

CMD ["/app/startServer.js"]
